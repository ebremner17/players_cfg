<?php

use \Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;

/**
 * Implements hook_theme().
 */
function players_cfg_theme($existing, $type, $theme, $path) {

  return [
    'cbl_copy_text' => [
      'variables' => [
        'copy_text' => NULL,
      ],
    ],
    'cbl_reserve' => [
      'variables' => [
        'reserve' => NULL,
      ],
    ],
    'cbl_upcoming_games' => [
      'variables' => [
        'games' => NULL,
      ],
    ],
  ];
}


/**
 * Implements hook_form_alter().
 */
function players_cfg_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'node_pi_ct_games_form') {
    $form['title']['#disabled'] = TRUE;
    $form['title']['#required'] = FALSE;
    $form['title']['widget']['#required'] = FALSE;
    $form['title']['widget'][0]['#required'] = FALSE;
  }

  if (
    $form_id == 'user_register_form' ||
    $form_id == 'user_form' ||
    $form_id == 'user_pass'
  ) {

    $form['#attributes']['class'][] = 'players-contained-width';
  }

  if ($form_id == 'user_register_form') {
    $form['message_wrapper'] = [
      '#type' => 'fieldset',
      '#attributes' => [
        'class' => ['user-register-message'],
      ],
    ];

    $form['message_wrapper']['message'] = [
      '#type' => 'markup',
      '#markup' => 'Membership and access to all promotions is contingent on correct full first and last names.  No short forms please.   Information is all encrypted, private and has extremely limited access.',
    ];
  }
}

/**
 * Implements hook_entity_presave().
 */
function players_cfg_entity_presave(Drupal\Core\Entity\EntityInterface $entity) {

  $type = $entity->bundle();
  switch ($entity->bundle()) {
    // Here you modify only your day content type
    case 'day':
      // Setting the title with the value of field_date.
      $entity->setTitle($entity->get('field_date')->value);
      break;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function players_cfg_form_user_login_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['#attributes']['class'][] = 'players-contained-width';
  $form['name']['#title'] = t('Email address');
  $form['name']['#description'] = t('Enter your email address.');
  $form['pass']['#description'] = t('Enter your Player\'s Inc password.');

  $form['#submit'][] = '_players_cfg_user_login_form_submit';
}

/**
 * Implements hook_toolbar_alter().
 *
 * Remove the Manage link from the toolbar for authenticated users.
 */
function players_cfg_toolbar_alter(&$items) {

  // Get the current user.
  $current_user = \Drupal::currentUser();

  // Ensure that the current user is not user1.
  if ($current_user->id() !== 1) {

    // Get the roles of the user.
    $roles = $current_user->getRoles();

    // If there is only 1 role and that first role is authenticated, remove the manage link.
    // If there are multiple roles then we know that they will have the Manage link, we are
    // only removing the manage link for strictly authenticated users only.
    if (
      count($roles) > 0 &&
      !in_array('administrator', $roles) &&
      !in_array('owner', $roles) &&
      (
        $roles[0] == 'authenticated' ||
        in_array('floor', $roles)
      )
    ) {

      // Remove the manage link.
      unset($items['administration']);
      unset($items['shortcuts']);
    }
  }
}

/**
 * Implements hook_preprocess_menu().
 */
function players_cfg_preprocess_menu(&$variables) {

  // If the account menu, check if user is logged in,
  // and if so, remove the create account link.
  if ($variables['menu_name'] == 'account') {

    // If the user is logged in remove create account link.
    if (\Drupal::currentUser()->isAuthenticated()) {
      unset($variables['items']['players_cfg.create_account']);
    }
  }
}

/**
 * Implements hook_cron().
 */
function players_cfg_cron() {
  // Performs a cache rebuild.
  drupal_flush_all_caches();
}

/**
 * Implements hook_preprocess_page().
 */
function players_cfg_preprocess_page(&$variables) {
  if (\Drupal::service('router.admin_context')->isAdminRoute()) {
    $variables['#attached']['library'][] = 'players_theme/admin-extra';
  }
}

/**
 * Custom submit handler for the login form.
 */
function _players_cfg_user_login_form_submit($form, FormStateInterface $form_state) {
  $url = Url::fromUri('internal:/home');
  $form_state->setRedirectUrl($url);
}

/**
 * Function to get list of colours.
 *
 * @return string
 *   String of colours.
 */
function _players_cfg_colours(): string {

  // Magenta, Pink, Purple, Lime green, White,
  // Silver, Yellow.
  $colours = '';

  // White.
  $colours .= '#FFFFFF,';

  // Black.
  $colours .= '#000000,';

  // Aquamarine.
  $colours .= '#7FFFD4,';

  // Cyan.
  $colours .= '#00FFFF,';

  // Dark blue.
  $colours .= '#00008B,';

  // Gray.
  $colours .= '#808080,';

  // Green.
  $colours .= '#008000,';

  // Light blue.
  $colours .= '#ADD8E6,';

  // Lime green.
  $colours .= '#00ff00,';

  // Magenta.
  $colours .= '#FF00FF,';

  // Maroon.
  $colours .= '#800000,';

  // Olive.
  $colours .= '#666A26,';

  // Orange.
  $colours .= '#FFA500,';

  // Pink.
  $colours .= '#FFC0CB,';

  // Purple.
  $colours .= '#800080,';

  // Red.
  $colours .= '#ff0000,';

  // Silver.
  $colours .= '#C0C0C0,';

  // Yellow.
  $colours .= '#FFFF00';

  return $colours;
}

/**
 * Function to get the type of games.
 *
 * @return array
 *   Array of game types.
 */
function _players_cfg_game_types(): array {

  return [
    '1/2 ($300 max)' => '1/2 ($300 max)',
    '2/5 ($500 max)' => '2/5 ($500 max)',
    'Tournament ($1500 Guarantee)' => 'Tournament ($1500 Guarantee)',
    'Tournament - Gold ($7777 Guarantee)' => 'Tournament - Gold ($7777 Guarantee)',
  ];
}
