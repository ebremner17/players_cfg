<?php

use \Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\Core\Entity\EntityInterface;
use Drupal\file\Entity\File;
use Drupal\media\Entity\Media;

/**
 * Implements hook_theme().
 */
function players_cfg_theme($existing, $type, $theme, $path) {

  return [
    'cbl_copy_text' => [
      'variables' => [
        'copy_text' => NULL,
      ],
    ],
    'cbl_reserve' => [
      'variables' => [
        'reserve' => NULL,
      ],
    ],
    'cbl_upcoming_games' => [
      'variables' => [
        'games' => NULL,
      ],
    ],
  ];
}


/**
 * Implements hook_form_alter().
 */
function players_cfg_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'node_pi_ct_games_form') {
    $form['title']['#disabled'] = TRUE;
    $form['title']['#required'] = FALSE;
    $form['title']['widget']['#required'] = FALSE;
    $form['title']['widget'][0]['#required'] = FALSE;
  }

  if (
    $form_id == 'user_register_form' ||
    $form_id == 'user_form' ||
    $form_id == 'user_pass'
  ) {

    $form['#attributes']['class'][] = 'players-contained-width';
  }

  if ($form_id == 'user_register_form') {
    $form['message_wrapper'] = [
      '#type' => 'fieldset',
      '#attributes' => [
        'class' => ['user-register-message'],
      ],
    ];

    $form['message_wrapper']['message'] = [
      '#type' => 'markup',
      '#markup' => 'Membership and access to all promotions is contingent on correct full first and last names.  No short forms please.   Information is all encrypted, private and has extremely limited access.',
    ];
  }
}

/**
 * Implements hook_entity_presave().
 */
function players_cfg_entity_presave(Drupal\Core\Entity\EntityInterface $entity) {

  $type = $entity->bundle();
  switch ($entity->bundle()) {
    // Here you modify only your day content type
    case 'day':
      // Setting the title with the value of field_date.
      $entity->setTitle($entity->get('field_date')->value);
      break;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function players_cfg_form_user_login_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['#attributes']['class'][] = 'players-contained-width';
  $form['name']['#title'] = t('Email address');
  $form['name']['#description'] = t('Enter your email address.');
  $form['pass']['#description'] = t('Enter your Player\'s Inc password.');

  $form['#submit'][] = '_players_cfg_user_login_form_submit';
}

/**
 * Implements hook_toolbar_alter().
 *
 * Remove the Manage link from the toolbar for authenticated users.
 */
function players_cfg_toolbar_alter(&$items) {

  // Get the current user.
  $current_user = \Drupal::currentUser();

  // Ensure that the current user is not user1.
  if ($current_user->id() !== 1) {

    // Get the roles of the user.
    $roles = $current_user->getRoles();

    // If there is only 1 role and that first role is authenticated, remove the manage link.
    // If there are multiple roles then we know that they will have the Manage link, we are
    // only removing the manage link for strictly authenticated users only.
    if (
      count($roles) > 0 &&
      !in_array('administrator', $roles) &&
      !in_array('owner', $roles) &&
      (
        $roles[0] == 'authenticated' ||
        in_array('floor', $roles)
      )
    ) {

      // Remove the manage link.
      unset($items['administration']);
      unset($items['shortcuts']);
    }
  }
}

/**
 * Implements hook_preprocess_menu().
 */
function players_cfg_preprocess_menu(&$variables) {

  // If the account menu, check if user is logged in,
  // and if so, remove the create account link.
  if ($variables['menu_name'] == 'account') {

    // If the user is logged in remove create account link.
    if (\Drupal::currentUser()->isAuthenticated()) {
      unset($variables['items']['players_cfg.create_account']);
    }
  }
}

/**
 * Implements hook_cron().
 */
function players_cfg_cron() {
  // Performs a cache rebuild.
  drupal_flush_all_caches();
}

/**
 * Implements hook_preprocess_page().
 */
function players_cfg_preprocess_page(&$variables) {
  if (\Drupal::service('router.admin_context')->isAdminRoute()) {
    $variables['#attached']['library'][] = 'players_theme/admin-extra';
  }
}

/**
 * Implements hook_entity_insert().
 */
function players_cfg_entity_insert(EntityInterface $entity) {

  // If we are on a user entity, insert/update mailchimp.
  if ($entity->getEntityTypeId() == 'user') {
    _players_cfg_mailchimp_subscription($entity);
  }
}

/**
 * Implements hook_entity_update().
 */
function players_cfg_entity_update(EntityInterface $entity) {

  // If we are on a user entity, insert/update mailchimp.
  if ($entity->getEntityTypeId() == 'user') {
    _players_cfg_mailchimp_subscription($entity);
  }
}

/**
 * Implements hook_preprocess_node().
 */
function players_cfg_preprocess_node(&$variables) {

  // Get the header text config.
  $config = \Drupal::config('players_cfg.header_text');

  // Get the club info.
  $club_info = $config->get('club_info');

  // Get the marketing items.
  $mis = $config->get('marketing_items');

  if ($club_info) {
    $media = Media::load($club_info['image']);

    // Hero media exists, get file entity from media.
    if ($file = $media->field_media_image_2->entity) {

      // Load the image styles that are needed for the hero.
      $pi_styles = \Drupal::service('players_reserve.players_service')->getResponsiveImageStyles();

      // Step through each of the image styles and ensure that
      // the derivative is created.
      foreach ($pi_styles as $pi_style) {

        // Load the image style.
        $style = \Drupal::entityTypeManager()
          ->getStorage('image_style')
          ->load($pi_style);

        // Get the styled image derivative.
        $destination = $style->buildUri($file->getFileUri());

        // If the derivative doesn't exist yet (as the image style may
        // have been added post launch), create it.
        if (!file_exists($destination)) {
          $style->createDerivative($file->getFileUri(), $destination);
        }
      }
    }

    $sources = \Drupal::service('players_reserve.players_service')
      ->prepareResponsiveImage($media, 'ris_players_responsive', 'field_media_image_2', FALSE);
    $variables['club_info']['image']['sources'] = $sources['responsive_sources'];
    $variables['club_info']['image']['img_element'] = $sources['img_element']['#uri'];
    $variables['club_info']['image']['alt'] = $sources['alt'];
    $variables['club_info']['text'] = [
      '#type' => 'processed_text',
      '#text' => $club_info['text']['value'],
      '#format' => $club_info['text']['format'],
    ];
    $variables['club_info']['color'] = $club_info['color'];
  }

  // If there are marketing items, add to the variables.
  if ($mis) {

    $marketing_items = [];

    if ($mis) {
      foreach ($mis as $mi) {

        if ($mi['image']) {
          $media = Media::load($mi['image']);

          if ($media && $media->hasField('field_media_image_2')) {
            $fid = $media->field_media_image_2[0]->getValue()['target_id'];

            $file = File::load($fid);

            $uri = $file->getFileUri();

            $image = \Drupal::service('file_url_generator')->generateAbsoluteString($uri);
          }
          else {
            $image = NULL;
          }
        }
        else {
          $media = NULL;
        }

        if ($mi['icon']) {
          $media = Media::load($mi['icon']);

          $fid = $media->field_media_image_1[0]->getValue()['target_id'];

          $file = File::load($fid);

          $uri = $file->getFileUri();

          $icon = \Drupal::service('file_url_generator')->generateAbsoluteString($uri);
        }
        else {
          $media = NULL;
        }

        $marketing_items[] = [
          'image' => $image,
          'icon' => $icon,
          'heading' => $mi['heading'],
          'text' => [
            '#type' => 'processed_text',
            '#text' => $mi['text']['value'],
            '#format' => $mi['text']['format'],
          ],
          'url' => $mi['url'],
          'color' => $mi['color'],
        ];
      }
    }

    $variables['marketing_items'] = $marketing_items;
  }
}

/**
 * Helper function to update or insert into mailchimp.
 *
 * @param EntityInterface $entity
 *   The user entity.
 */
function _players_cfg_mailchimp_subscription(EntityInterface $entity) {

  global $config;

  // Get the api for mailchimp.
  $client = new MailchimpMarketing\ApiClient();
  $client->setConfig([
    'apiKey' => $config['mailchimp_api_key'],
    'server' => $config['mailchimp_server'],
  ]);

  // Get first/last names and phone from entity.
  $first_name = $entity->field_user_first_name->value;
  $last_name = $entity->field_user_last_name->value;
  $phone = $entity->field_user_phone->getValue();

  // Get correct phone number.
  if (isset($phone[0]['phone'])) {
    $phone = $phone[0]['phone'];
  }
  else {
    $phone = $phone[0]['local_number'];
  }

  // Check if this is an update, check if the email address
  // is different, and if it is, archive the old email.
  if ($entity->original !== NULL) {

    // If the old and new emails are not the same,
    // archive the old email.
    if ($entity->original->getEmail() !== $entity->getEmail()) {

      // Get the subscriber hash using md5.
      $subscriber_hash = md5(strtolower($entity->original->getEmail()));

      // The delete flag.
      $delete_flag = TRUE;

      // Try and see if member exists.
      // If member does not exist, then
      // set the flag so that we do no
      // delete them.
      try {
        $response = $client->lists->getListMember($config['mailchimp_list_id'], $subscriber_hash);
      }
      catch (Exception $e) {
        $delete_flag = FALSE;
      }

      // If the flag is set, delete the member.
      if ($delete_flag) {

        // Archive the old email address.
        $client->lists->deleteListMember($config['mailchimp_list_id'], $subscriber_hash);
      }
    }
  }

  // Get the email address from the entity.
  $email = $entity->getEmail();

  // Get the subscriber hash using md5.
  $subscriber_hash = md5(strtolower($entity->getEmail()));

  // Put the new client in the mailchimp list.
  $client->lists->setListMember($config['mailchimp_list_id'], $subscriber_hash, [
    'email_address' => $email,
    'merge_fields' => [
      'FNAME' => $first_name,
      'LNAME' => $last_name,
      'PHONE' => $phone,
    ],
    "status" => "subscribed",
  ]);
}

/**
 * Custom submit handler for the login form.
 */
function _players_cfg_user_login_form_submit($form, FormStateInterface $form_state) {
  $url = Url::fromUri('internal:/home');
  $form_state->setRedirectUrl($url);
}

/**
 * Function to get list of colours.
 *
 * @param string $type
 *   The type of colours to get.
 *
 * @return string
 *   String of colours.
 */
function _players_cfg_colours(string $type = 'all'): string {

  $colours = '';

  $path = \Drupal::service('extension.list.module')->getPath('players_cfg');

  $row = 0;

  if ($type == 'dark') {
    $color_file_path = '/dark_colors.csv';
  }
  else {
    $color_file_path = '/colors.csv';
  }

  if (($handle = fopen($path . $color_file_path, "r")) !== FALSE) {
    while (($data = fgetcsv($handle, 1000, ",")) !== FALSE) {

      if ($row > 0) {
        $colours .= ',';
      }
      $num = count($data);
      $row++;
      for ($c=0; $c < $num; $c++) {
        $colours .= $data[$c];
      }
    }
    fclose($handle);
  }

  return $colours;
}

/**
 * Function to get the type of games.
 *
 * @return array
 *   Array of game types.
 */
function _players_cfg_game_types(): array {

  return [
    '1/3 ($500 max)' => '1/3 ($500 max)',
    '1/2 ($500 max)' => '1/2 ($500 max)',
    '1/2 ($300 max)' => '1/2 ($300 max)',
    '2/5 ($1000 max)' => '2/5 ($1000 max)',
    '2/5 ($500 max)' => '2/5 ($500 max)',
    'Tournament ($50 buyin/$50 rebuys)' => 'Tournament ($50 buyin/$50 rebuys)',
    'Tournament ($125 buyin/$100 rebuys)' => 'Tournament ($125 buyin/$100 rebuys)',
    'Tournament ($30 Satellite)' => 'Tournament ($30 Satellite)',
    'Tournament ($50 Satellite)' => 'Tournament ($50 Satellite)',
    'Tournament ($1000 Guarantee)' => 'Tournament ($1000 Guarantee)',
    'Tournament ($1500 Guarantee)' => 'Tournament ($1500 Guarantee)',
    'Tournament ($2000 Guarantee)' => 'Tournament ($2000 Guarantee)',
    'Tournament ($5000 Guarantee)' => 'Tournament ($5000 Guarantee)',
    'Tournament ($5000)' => 'Tournament ($5000)',
    'Tournament ($5000 Estimated)' => 'Tournament ($5000 Estimated)',
    'Tournament ($1000 Guarantee, Seat to $7777)' => 'Tournament ($1000 Guarantee, Seat to $7777)',
    'Tournament - Gold ($7777 Guarantee)' => 'Tournament - Gold ($7777 Guarantee)',
  ];
}

/**
 * Helper function to process the batch.
 *
 * @param array $users
 *   The users to process.
 * @param int $total_count
 *   The total count of users.
 * @param $context
 *   The context of the batch.
 */
function _players_cfg_update_mailchimp(array $users, int $total_count, array &$context){

  // The message for the batch process.
  $message = 'Updating mailchimp list ...';

  // Step through each user and add the id
  // so that results are displayed.
  foreach ($users as $user) {
    _players_cfg_mailchimp_subscription($user);
    $context['results'][] = $user->id();
  }

  // Update the message.
  $context['message'] = 'Processed ' . count($context['results']) . ' players out of 419';
}

/**
 * Helper function once batch finishes.
 *
 * @param bool $success
 *   If batch was successful.
 * @param array $results
 *   The results.
 * @param array $operations
 *   The operations.
 */
function _players_cfg_update_mailchimp_finished(bool $success, array $results, array $operations) {

  // The 'success' parameter means no fatal PHP errors were detected. All
  // other error management should be handled using 'results'.
  if ($success) {
    $message = \Drupal::translation()->formatPlural(
      count($results),
      'One player processed.', '@count players processed.'
    );
  }
  else {
    $message = t('Finished with an error.');
  }

  \Drupal::messenger()->addStatus($message);
}

/**
 * Implements template_preprocess_form_element_label().
 */
function players_cfg_preprocess_form_element_label(&$variables) {

  // If this is a marketing item heading, fake the required.
  if (
    isset($variables['element']['#id']) &&
    str_contains($variables['element']['#id'], '-item-heading')
  ) {

    $variables['attributes']['class'][] = 'form-required';
  }
}
